{"remainingRequest":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/src/views/curso/Tema2.vue?vue&type=template&id=6efc1f30&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/src/views/curso/Tema2.vue","mtime":1735408843711},{"path":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_1/U3_Investigacion_Innovacion_1/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gSGVycmFtaWVudGFzIHBhcmEgbGEgR2VzdGnDs24gZGUgbGEgSW5ub3ZhY2nDs24nIikKICAuY29udGFpbmVyLnRhcmpldGEudGFyamV0YS0tYmxhbmNhLnB4LTQucHgtbWQtNS5wdC00LnB0LW1kLTUub3ZlcmZsb3ctaGlkZGVuCiAgICAuYmctY29sb3ItMS5tYi01KGRhdGEtYW9zPSJmYWRlLXVwIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0U2RkJGMSIpCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAuY29sLWxnCiAgICAgICAgICAucC00CiAgICAgICAgICAgIHAubWItMChkYXRhLWFvcz0iZmFkZS11cCIpIEFsIGFzdW1pciBlbCBkZXNhZsOtbyBkZSBnZXN0aW9uYXIgcHJveWVjdG9zIGRlIGludmVzdGlnYWNpw7NuIGUgaW5ub3ZhY2nDs24sIGVzIGZ1bmRhbWVudGFsIGFib3JkYXIgdW5hIHNlcmllIGRlIGV0YXBhcyB5IGVtcGxlYXIgaGVycmFtaWVudGFzIGVzcGVjw61maWNhcyBxdWUgc2UgYWRhcHRlbiBhIGxhcyBuZWNlc2lkYWRlcyB5IGNvbnRleHRvcyBkZSBsYXMgaW5pY2lhdGl2YXMuIEVzdGFzIGhlcnJhbWllbnRhcyBwZXJtaXRlbiBjb25zb2xpZGFyIHByb3B1ZXN0YXMgY29tcGV0aXRpdmFzIHkgYWRlY3VhZGFzLiBFbiBlc3RhIHNlc2nDs24gc2UgcHJvZnVuZGl6YXLDoSBlbiBsYXMgaGVycmFtaWVudGFzIGVzdHVkaWFkYXMgZW4gbGEgdW5pZGFkIDIsIGNvbXBsZW1lbnTDoW5kb2xhcyBjb24gb3RyYXMgYW1wbGlhbWVudGUgdXRpbGl6YWRhcyBlbiBsYSBnZXN0acOzbiBkZSBsYSBpbm5vdmFjacOzbiwgY29tbyBzZSBkZXRhbGxhIGVuIGxhIGZpZ3VyYSAyLgogICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgZmlndXJlCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzMwLnBuZycsIGFsdD0nJykKICAgIC50aXR1bG8tZmlndXJhLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoNSBGaWd1cmEgMi4KICAgICAgc3BhbiBIZXJyYW1pZW50YXMgcGFyYSBsYSBnZXN0acOzbiBkZSBwcm95ZWN0b3MgZGUgaW52ZXN0aWdhY2nDs24gZSBpbm5vdmFjacOzbi4KICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzMxLnN2ZycsIGFsdD0nJykKICAgIGZpZ2NhcHRpb24ubWItNSBGdWVudGUuIEVsIEF1dG9yLCAyMDI0LgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykubXQtNQogICAgICBoMiAjW3NwYW4gMi4xXSBMZWFuIFN0YXJ0dXAKICAgIHAubWItNCBFbCBlbmZvcXVlIExlYW4gU3RhcnR1cCBzZSBiYXNhIGVuIHRyZXMgcGlsYXJlcyBlc2VuY2lhbGVzOiBsYSBjcmVhY2nDs24gZGUgdW4gUHJvZHVjdG8gTcOtbmltbyBWaWFibGUgKE1WUCksIGxhIG1lZGljacOzbiBkZSByZXN1bHRhZG9zIG1lZGlhbnRlIG3DqXRyaWNhcyBhY2Npb25hYmxlcyB5IGVsIGFwcmVuZGl6YWplIGNvbnRpbnVvIHBhcmEgZGVjaWRpciBlbnRyZSBwaXZvdGFyIG8gbWFudGVuZXIgbGEgZGlyZWNjacOzbiBlc3RyYXTDqWdpY2EuIEVzdGUgZW5mb3F1ZSBtaW5pbWl6YSBsb3MgZGVzcGVyZGljaW9zIHkgbWF4aW1pemEgbGFzIG9wb3J0dW5pZGFkZXMgZGUgYXByZW5kaXphamUsIGNlbnRyw6FuZG9zZSBlbiBnZW5lcmFyIHZhbG9yIHBhcmEgbG9zIHVzdWFyaW9zIHkgZWxpbWluYW5kbyBhY3RpdmlkYWRlcyBxdWUgbm8gY29udHJpYnV5YW4gZGlyZWN0YW1lbnRlIGFsIGRlc2Fycm9sbG8geSB2YWxpZGFjacOzbiBkZSBoaXDDs3Rlc2lzIGNsYXZlLgogICAgVGFic0IuY29sb3ItYWNlbnRvLWNvbnRlbmlkby5tYi01CiAgICAgIC5weS00LnB5LW1kLTUodGl0dWxvPSJNw61uaW1vIFZpYWJsZSAoTVZQKSIgOmljb25vPSJyZXF1aXJlKCdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zMi5zdmcnKSIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNGM0YzRjMgIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy00LmNvbC03Lm1iLWxnLTAubWItMzogaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMzMucG5nIiwgc3R5bGU9Im1heC13aWR0aDogMTAwJSIpCiAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgaDQgUHJvZHVjdG8gTcOtbmltbyBWaWFibGUgKE1WUCkKICAgICAgICAgICAgcC5tYi0wIFZlcnNpw7NuIGluaWNpYWwgZGUgdW4gcHJvZHVjdG8gY29uIGxhcyBmdW5jaW9uYWxpZGFkZXMgZXNlbmNpYWxlcyBuZWNlc2FyaWFzIHBhcmEgdmFsaWRhciBoaXDDs3Rlc2lzIGNsYXZlIGRlIG5lZ29jaW8geSBvYnRlbmVyIHJldHJvYWxpbWVudGFjacOzbiBkZWwgdXN1YXJpby4KICAgICAgLnB5LTQucHktbWQtNSh0aXR1bG89Ik1lZGljacOzbiBwcmVjaXNhIiA6aWNvbm89InJlcXVpcmUoJ0AvYXNzZXRzL2N1cnNvL3RlbWFzLzM0LnN2ZycpIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0YzRjNGMyAiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgICAgICAuY29sLWxnLTQuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNS5wbmciLCBzdHlsZT0ibWF4LXdpZHRoOiAxMDAlIikKICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICBoNCBNZWRpY2nDs24gcHJlY2lzYQogICAgICAgICAgICBwLm1iLTAgVXNvIGRlIG3DqXRyaWNhcyBlc3BlY8OtZmljYXMgeSBhY2Npb25hYmxlcyBwYXJhIGV2YWx1YXIgZWwgcmVuZGltaWVudG8gZGVsIE1WUCB5IHN1IGFsaW5lYWNpw7NuIGNvbiBsYXMgbmVjZXNpZGFkZXMgZGVsIG1lcmNhZG8uCiAgICAgIC5weS00LnB5LW1kLTUodGl0dWxvPSJBcHJlbmRpemFqZSB2YWxpZGFkbyIgOmljb25vPSJyZXF1aXJlKCdAL2Fzc2V0cy9jdXJzby90ZW1hcy8zNi5zdmcnKSIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNGM0YzRjMgIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy00LmNvbC03Lm1iLWxnLTAubWItMzogaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMzcucG5nIiwgc3R5bGU9Im1heC13aWR0aDogMTAwJSIpCiAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgaDQgQXByZW5kaXphamUgdmFsaWRhZG8KICAgICAgICAgICAgcC5tYi0wIFByb2Nlc28gaXRlcmF0aXZvIHF1ZSBwZXJtaXRlIGFqdXN0YXIgZXN0cmF0ZWdpYXMgYmFzw6FuZG9zZSBlbiBkYXRvcyByZWFsZXMgb2J0ZW5pZG9zIGRlIHVzdWFyaW9zIHkgZXhwZXJpbWVudG9zLgogICAgaDMgQ2ljbG8gY29uc3RydWlyLW1lZGlyLWFwcmVuZGVyCiAgICBwLm1iLTQgRXN0ZSBjaWNsbyBpdGVyYXRpdm8gZXMgZnVuZGFtZW50YWwgZW4gZWwgbWFyY28gTGVhbiBTdGFydHVwIHBhcmEgYWNlbGVyYXIgZWwgZGVzYXJyb2xsbyBkZSBwcm9kdWN0b3MgeSBzZXJ2aWNpb3MuIENhZGEgaXRlcmFjacOzbiBpbmNsdXllIGxvcyBzaWd1aWVudGVzIHBhc29zOgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLXN0cmV0Y2gubWItNQogICAgICAuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoCiAgICAgICAgICAgIHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvMzguc3ZnIgogICAgICAgICAgICBhbHQ9IiIKICAgICAgICAgICAgc3R5bGU9IndpZHRoOiA5MHB4IgogICAgICAgICAgKQogICAgICAgICAgaDQudGV4dC1jZW50ZXIgQ29uc3RydWlyCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgRGVzYXJyb2xsYXIgcsOhcGlkYW1lbnRlIHByb3RvdGlwb3MgbyBNVlBzIHBhcmEgcHJvYmFyIGhpcMOzdGVzaXMgY2xhdmUgZGUgbmVnb2Npby4KICAgICAgLmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KAogICAgICAgICAgICBzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzM5LnN2ZyIKICAgICAgICAgICAgYWx0PSIiCiAgICAgICAgICAgIHN0eWxlPSJ3aWR0aDogOTBweCIKICAgICAgICAgICkKICAgICAgICAgIGg0LnRleHQtY2VudGVyIE1lZGlyCiAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgSW1wbGVtZW50YXIgc2lzdGVtYXMgZGUgbWVkaWNpw7NuIHBhcmEgcmVjb2xlY3RhciBkYXRvcyBzaWduaWZpY2F0aXZvcyBzb2JyZSBlbCBkZXNlbXBlw7FvIGRlbCBNVlAgeSBsYSByZXNwdWVzdGEgZGVsIHVzdWFyaW8uCiAgICAgIC5jb2wtbGctNC5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNCgKICAgICAgICAgICAgc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy80MC5zdmciCiAgICAgICAgICAgIGFsdD0iIgogICAgICAgICAgICBzdHlsZT0id2lkdGg6IDkwcHgiCiAgICAgICAgICApCiAgICAgICAgICBoNC50ZXh0LWNlbnRlciBBcHJlbmRlcgogICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIEFuYWxpemFyIGxvcyBkYXRvcyByZWNvbGVjdGFkb3MgcGFyYSBleHRyYWVyIGFwcmVuZGl6YWplcyB5IGRlY2lkaXIgc2kgc2UgZGViZW4gcmVhbGl6YXIgY2FtYmlvcyBlc3RyYXTDqWdpY29zIChwaXZvdGFyKSBvIGNvbnRpbnVhciBjb24gZWwgcGxhbiBhY3R1YWwuCiAgICBoMyBQcm9kdWN0byBNw61uaW1vIFZpYWJsZSAoTVZQKQogICAgcC5tYi00IEVsIE1WUCBlcyB1bmEgaGVycmFtaWVudGEgY2VudHJhbCBwYXJhIHZhbGlkYXIgaGlww7N0ZXNpcyBkZSBtYW5lcmEgZWZpY2llbnRlLiBJbXBsaWNhIHVuIGJhbGFuY2UgZW50cmUgZnVuY2lvbmFsaWRhZCBiw6FzaWNhIHkgY2FsaWRhZCwgYXNlZ3VyYW5kbyBxdWUgc2VhIHN1ZmljaWVudGUgcGFyYSBvYnRlbmVyIHJldHJvYWxpbWVudGFjacOzbiBzaWduaWZpY2F0aXZhIGRlIGxvcyB1c3Vhcmlvcy4KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtbGctOC5tYi1sZy0wLm1iLTMKICAgICAgICBMaW5lYVRpZW1wb0QuY29sb3Itc2VjdW5kYXJpbwogICAgICAgICAgcC50ZXh0LXNtYWxsKG51bWVybz0iMSIgdGl0dWxvPSJEZWZpbmljacOzbiBkZSBmdW5jaW9uYWxpZGFkZXMiKSAgSWRlbnRpZmljYXIgbGFzIGNhcmFjdGVyw61zdGljYXMgZXNlbmNpYWxlcyBuZWNlc2FyaWFzIHBhcmEgcHJvYmFyIGxhIGhpcMOzdGVzaXMgbcOhcyBjcsOtdGljYS4KICAgICAgICAgIHAudGV4dC1zbWFsbChudW1lcm89IjIiIHRpdHVsbz0iUmV0cm9hbGltZW50YWNpw7NuIHRlbXByYW5hIikgUmVjaWJpciBjb21lbnRhcmlvcyBkZSB1c3VhcmlvcyByZWFsZXMgbG8gbcOhcyByw6FwaWRvIHBvc2libGUgcGFyYSBhanVzdGFyIGVsIHByb2R1Y3RvIGVuIGxhcyBzaWd1aWVudGVzIGl0ZXJhY2lvbmVzLgogICAgICAgICAgcC50ZXh0LXNtYWxsKG51bWVybz0iMyIgdGl0dWxvPSJSZWR1Y2Npw7NuIGRlIHJpZXNnb3MiKSBNaW5pbWl6YXIgZWwgZGVzcGVyZGljaW8gZGUgcmVjdXJzb3MgYWwgZXZpdGFyIGVsIGRlc2Fycm9sbG8gZXhjZXNpdm8gYW50ZXMgZGUgdmFsaWRhciBsYSBkaXJlY2Npw7NuIGVzdHJhdMOpZ2ljYS4KICAgICAgLmNvbC1sZy00LmNvbC03OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80MS5wbmcnLCBhbHQ9JycpCiAgICBoMyBQaXZvdGFyICB5IGVzY2FsYWJpbGlkYWQKICAgIHAubWItNCBQaXZvdGFyIGltcGxpY2EgcmVhbGl6YXIgY2FtYmlvcyBlc3RyYXTDqWdpY29zIGVuIGxhIGRpcmVjY2nDs24gZGVsIG5lZ29jaW8gYmFzw6FuZG9zZSBlbiBldmlkZW5jaWFzLCBtaWVudHJhcyBxdWUgbGEgZXNjYWxhYmlsaWRhZCBzZSBjZW50cmEgZW4gZXhwYW5kaXIgbGFzIG9wZXJhY2lvbmVzIGRlIG1hbmVyYSBzb3N0ZW5pYmxlLgogICAgZGl2KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRUFGQUZDIikubWItNAogICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIKICAgICAgICAuY29sLWxnLTcubWItbGctMC5tYi0zCiAgICAgICAgICAucC01CiAgICAgICAgICAgIG9sLmxpc3RhLW9sLS1jdWFkcm8oZGF0YS1hb3M9ImZhZGUtdXAiKQogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YShzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0E1MzBGRSIpCiAgICAgICAgICAgICAgICAgIHNwYW4udGV4dC13aGl0ZSAxCiAgICAgICAgICAgICAgICB8IFBpdm90YXIuIFJlZGVmaW5pciBlbCBlbmZvcXVlIGRlbCBuZWdvY2lvIGN1YW5kbyBsb3MgZGF0b3Mgc3VnaWVyZW4gcXVlIGxhIGVzdHJhdGVnaWEgYWN0dWFsIG5vIGVzIHZpYWJsZSBvIGVmZWN0aXZhLiBFc3RvIHB1ZWRlIGluY2x1aXIgY2FtYmlvcyBlbiBlbCBtb2RlbG8gZGUgbmVnb2NpbywgbWVyY2FkbyBvYmpldGl2byBvIHByb2R1Y3RvLgogICAgICAgICAgICAgIGxpIAogICAgICAgICAgICAgICAgLmxpc3RhLW9sLS1jdWFkcm9fX3ZpbmV0YShzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0E1MzBGRSIpCiAgICAgICAgICAgICAgICAgIHNwYW4udGV4dC13aGl0ZSAyCiAgICAgICAgICAgICAgICB8IEVzY2FsYWJpbGlkYWQuIFByZXBhcmFyIGVsIG5lZ29jaW8gcGFyYSBjcmVjZXIgZGUgbWFuZXJhIGVmaWNpZW50ZSwgYXNlZ3VyYW5kbyBxdWUgbGFzIG9wZXJhY2lvbmVzLCByZWN1cnNvcyB5IHNpc3RlbWFzIHB1ZWRhbiBtYW5lamFyIHVuIGF1bWVudG8gc2lnbmlmaWNhdGl2byBlbiBsYSBkZW1hbmRhIHNpbiBjb21wcm9tZXRlciBsYSBjYWxpZGFkLgogICAgICAgIC5jb2wtbGctNS5jb2wtNwogICAgICAgICAgLnAtNS5wYi0wCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzQyLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDEwMCUiKQogICAgcC5tYi00IEVsIGVuZm9xdWUgTGVhbiBTdGFydHVwIHByb3BvcmNpb25hIHVuIG1hcmNvIMOhZ2lsIHkgZWZpY2llbnRlIHBhcmEgZ2VzdGlvbmFyIHByb3llY3RvcywgcGVybWl0aWVuZG8gaXRlcmFjaW9uZXMgcsOhcGlkYXMgeSBkZWNpc2lvbmVzIGZ1bmRhbWVudGFkYXMgYmFzYWRhcyBlbiBkYXRvcyByZWFsZXMgZGVsIG1lcmNhZG8uIEVzdGUgbW9kZWxvIGVzIGVzcGVjaWFsbWVudGUgdmFsaW9zbyBlbiBlbnRvcm5vcyBkZSBhbHRhIGluY2VydGlkdW1icmUgZG9uZGUgbGEgY2FwYWNpZGFkIGRlIGFkYXB0YXJzZSByw6FwaWRhbWVudGUgZXMgY2xhdmUgcGFyYSBlbCDDqXhpdG8uCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgLmNvbC1sZy0xMAogICAgICAgIC5iZy1jb2xvci13aGl0ZS5zaGFkb3ctc29mdC5weS00LnB4LWxnLTUKICAgICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWFyb3VuZC5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgLmNvbC1tZC1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvdmlkZW8uc3ZnIiwgc3R5bGU9IndpZHRoOiA5MHB4OyIpCiAgICAgICAgICAgIC5jb2wKICAgICAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1iZXR3ZWVuLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgICAgICAgLmNvbC5tYi0zLm1iLXNtLTAKICAgICAgICAgICAgICAgICAgaDMubWItMSBFbCBNw6l0b2RvIExlYW4gU3RhcnRVcAogICAgICAgICAgICAgICAgICBwIFBhcmEgcHJvZnVuZGl6YXIgZW4gbG9zIGNvbm9jaW1pZW50b3MgcmVsYWNpb25hZG9zIGNvbiBwcm95ZWN0b3MgZGUgaW52ZXN0aWdhY2nDs24gZSBpbm5vdmFjacOzbiBlc3R1ZGlhZG9zLCBzZSByZWNvbWllbmRhIGV4cGxvcmFyIGVsIHNpZ3VpZW50ZSB2aWRlby4KICAgICAgICAgICAgICAgIC5jb2wtc20tYXV0bwogICAgICAgICAgICAgICAgICBhLmJvdG9uLmNvbG9yLWFjZW50by1ib3RvbmVzKGhyZWY9Imh0dHBzOi8veW91dHUuYmUvYU9mUGQ1aVk4SmciIHRhcmdldD0iX2JsYW5rIikKICAgICAgICAgICAgICAgICAgICBzcGFuIFZlciB2aWRlbwogICAgICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LXJpZ2h0CiAgICAjdF8yXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKS5tdC01CiAgICAgIGgyICNbc3BhbiAyLjJdIERlc2lnbiBUaGlua2luZwogICAgcC5tYi00IEVsIHByb2Nlc28gZGUgRGVzaWduIFRoaW5raW5nIHNlIGVzdHJ1Y3R1cmEgZW4gY2luY28gZXRhcGFzIGNsYXZlLCBsYXMgY3VhbGVzIGd1w61hbiBsYSBjcmVhY2nDs24gZGUgc29sdWNpb25lcyBpbm5vdmFkb3JhcyBjZW50cmFkYXMgZW4gZWwgdXN1YXJpby4gQ2FkYSB1bmEgZGUgZXN0YXMgZXRhcGFzIGZvbWVudGEgdW4gZW5mb3F1ZSBpdGVyYXRpdm8sIGZsZXhpYmxlIHkgY29sYWJvcmF0aXZvLgogICAgSW1hZ2VuSW5mb2dyYWZpY2EuY29sb3ItcHJpbWFyaW8ubWItNQogICAgICB0ZW1wbGF0ZSh2LXNsb3Q6aW1hZ2VuKQogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDMuc3ZnJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgICAgLnRhcmpldGEuYmctd2hpdGUucC0zKHg9IjE5LjUlIiB5PSI2OCUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgRW1wYXRpemFyCiAgICAgICAgcCBDb21wcmVuZGVyIHByb2Z1bmRhbWVudGUgYSBsb3MgdXN1YXJpb3MgbWVkaWFudGUgb2JzZXJ2YWNpw7NuLCBlbnRyZXZpc3RhcyB5IGFuw6FsaXNpcyBkZWwgY29udGV4dG8sIHBhcmEgaWRlbnRpZmljYXIgbmVjZXNpZGFkZXMgZXhwbMOtY2l0YXMgZSBpbXBsw61jaXRhcy4KICAgICAgLnRhcmpldGEuYmctd2hpdGUucC0zKHg9IjI2LjclIiB5PSIzMSUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgRGVmaW5pcgogICAgICAgIHAgU2ludGV0aXphciBsb3MgaW5zaWdodHMgb2J0ZW5pZG9zIGVuIHByb2JsZW1hcyBjbGFyb3MgeSBhY2Npb25hYmxlcywgcXVlIHNpcnZhbiBjb21vIHB1bnRvIGRlIHBhcnRpZGEgcGFyYSBnZW5lcmFyIHNvbHVjaW9uZXMgc2lnbmlmaWNhdGl2YXMuCiAgICAgIC50YXJqZXRhLmJnLXdoaXRlLnAtMyh4PSI0Ny4zJSIgeT0iMTIuMyUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgSWRlYXIKICAgICAgICBwIEdlbmVyYXIgdW5hIGFtcGxpYSBnYW1hIGRlIGlkZWFzIHkgcG9zaWJsZXMgc29sdWNpb25lcywgZm9tZW50YW5kbyBsYSBjcmVhdGl2aWRhZCB5IGVsIHBlbnNhbWllbnRvIGRpdmVyZ2VudGUgcGFyYSBhYm9yZGFyIGxvcyBwcm9ibGVtYXMgaWRlbnRpZmljYWRvcy4KICAgICAgLnRhcmpldGEuYmctd2hpdGUucC0zKHg9IjY4LjYlIiB5PSIzMSUiIG51bWVybz0iKyIpCiAgICAgICAgLmg1Lm1iLTIgUHJvdG90aXBhcgogICAgICAgIHAgQ29uc3RydWlyIHJlcHJlc2VudGFjaW9uZXMgc2ltcGxlcyB5IHRhbmdpYmxlcyBkZSBsYXMgaWRlYXMgbcOhcyBwcm9tZXRlZG9yYXMgcGFyYSBleHBsb3JhciB5IHZhbGlkYXIgc3UgdmlhYmlsaWRhZCBjb24gbG9zIHVzdWFyaW9zLgogICAgICAudGFyamV0YS5iZy13aGl0ZS5wLTMoeD0iNzEuNiUiIHk9IjY4JSIgbnVtZXJvPSIrIikKICAgICAgICAuaDUubWItMiBUZXN0ZWFyCiAgICAgICAgcCBFdmFsdWFyIGxvcyBwcm90b3RpcG9zIGNvbiB1c3VhcmlvcyByZWFsZXMsIHJlY29nZXIgcmV0cm9hbGltZW50YWNpw7NuIHZhbGlvc2EgZSBpdGVyYXIgc29icmUgbGFzIHNvbHVjaW9uZXMgcGFyYSBwZXJmZWNjaW9uYXJsYXMgeSBhbGluZWFybGFzIG1lam9yIGNvbiBsYXMgbmVjZXNpZGFkZXMgZGV0ZWN0YWRhcy4KICAgIGgzIEVtcGF0aXphciBjb24gdXN1YXJpb3MKICAgIHAubWItNCBMYSBldGFwYSBkZSBlbXBhdGl6YXIgZXMgZnVuZGFtZW50YWwgcGFyYSBjb21wcmVuZGVyIGVsIGNvbnRleHRvLCBsYXMgZW1vY2lvbmVzIHkgbGFzIG1vdGl2YWNpb25lcyBkZSBsb3MgdXN1YXJpb3MuCiAgICAuYmctZnVsbC13aWR0aC5iZy1zbHlkZXIucC01Lm1iLTUKICAgICAgU2x5ZGVyQSh0aXBvPSdiJykuYmctd2hpdGUKICAgICAgICAucm93LnAtNQogICAgICAgICAgLmNvbC1sZy03Lm1iLTQubWItbGctMAogICAgICAgICAgICBoNCBFbnRyZXZpc3RhcyBwcm9mdW5kYXMKICAgICAgICAgICAgcCBDb252ZXJzYWNpb25lcyBlc3RydWN0dXJhZGFzIHBhcmEgZXhwbG9yYXIgbGFzIG5lY2VzaWRhZGVzIHkgcHVudG9zIGRlIGRvbG9yIGRlIGxvcyB1c3Vhcmlvcy4KICAgICAgICAgIC5jb2wtbGctNS5jb2wtNwogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy80NC5wbmcnLCBhbHQ9J1RleHRvIHF1ZSBkZXNjcmliYSBsYSBpbWFnZW4nKQogICAgICAgIC5yb3cucC01CiAgICAgICAgICAuY29sLWxnLTcubWItNC5tYi1sZy0wCiAgICAgICAgICAgIGg0IE9ic2VydmFjacOzbiBjb250ZXh0dWFsCiAgICAgICAgICAgIHAgRXN0dWRpbyBkZWwgY29tcG9ydGFtaWVudG8gZGUgbG9zIHVzdWFyaW9zIGVuIHN1IGVudG9ybm8gbmF0dXJhbCBwYXJhIGlkZW50aWZpY2FyIHByb2JsZW1hcyBvY3VsdG9zLgogICAgICAgICAgLmNvbC1sZy01LmNvbC03CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ1LnBuZycsIGFsdD0nVGV4dG8gcXVlIGRlc2NyaWJhIGxhIGltYWdlbicpCiAgICAgICAgLnJvdy5wLTUKICAgICAgICAgIC5jb2wtbGctNy5tYi00Lm1iLWxnLTAKICAgICAgICAgICAgaDQgTWFwYXMgZGUgZW1wYXTDrWEKICAgICAgICAgICAgcCBIZXJyYW1pZW50YXMgdmlzdWFsZXMgcXVlIGF5dWRhbiBhIHNpbnRldGl6YXIgeSBjb21wcmVuZGVyIGxhcyBwZXJjZXBjaW9uZXMgeSBleHBlcmllbmNpYXMgZGVsIHVzdWFyaW8uCiAgICAgICAgICAuY29sLWxnLTUuY29sLTcKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvNDYucG5nJywgYWx0PSdUZXh0byBxdWUgZGVzY3JpYmEgbGEgaW1hZ2VuJykKICAgIGgzIERlZmluaWNpw7NuIGRlIHByb2JsZW1hcwogICAgcC5tYi00IEVuIGVzdGEgZXRhcGEsIGxvcyBwcm9ibGVtYXMgZGV0ZWN0YWRvcyBzZSBzaW50ZXRpemFuIGVuIGRlY2xhcmFjaW9uZXMgY2xhcmFzIHkgYWNjaW9uYWJsZXMgcXVlIGd1w61hbiBlbCBwcm9jZXNvIGRlIGRpc2XDsW8uCiAgICAuYmctZnVsbC13aWR0aC5tYi00KHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRUFGQUZDICIpCiAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlcgogICAgICAgIC5jb2wtbGctNC5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZy5wLTUucGItMChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzLzQ3LnN2ZycsIGFsdD0nJykKICAgICAgICAuY29sLWxnLTcucC01CiAgICAgICAgICAuYmctd2hpdGUucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy80OC5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICAgIGg1IERlY2xhcmFjacOzbiBkZWwgcHVudG8gZGUgdmlzdGEgKFBvaW50IG9mIFZpZXcpCiAgICAgICAgICAgICAgICBwLm1iLTAgQXJ0aWN1bGEgZWwgcHJvYmxlbWEgZGVzZGUgbGEgcGVyc3BlY3RpdmEgZGVsIHVzdWFyaW8sIGNvbWJpbmFuZG8gc3VzIG5lY2VzaWRhZGVzIGNvbiBsb3MgaW5zaWdodHMgb2J0ZW5pZG9zLgogICAgICAgICAgLmJnLXdoaXRlLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzQ5LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgICAgaDUgUHJlZ3VudGFzICJIb3cgTWlnaHQgV2XigJwKICAgICAgICAgICAgICAgIHAubWItMCBSZWZvcm11bGFuIGxvcyBwcm9ibGVtYXMgZW4gcHJlZ3VudGFzIGFiaWVydGFzIHF1ZSBpbnNwaXJhbiBzb2x1Y2lvbmVzIGNyZWF0aXZhcywgcG9yIGVqZW1wbG86ICLCv0PDs21vIHBvZHLDrWFtb3MgZmFjaWxpdGFyIGVsIGFjY2VzbyBhIFg/IgogICAgaDMgSWRlYWNpw7NuIHkgcHJvdG90aXBhZG8KICAgIHAubWItNCBFc3RhcyBldGFwYXMgdHJhbnNmb3JtYW4gbG9zIHByb2JsZW1hcyBkZWZpbmlkb3MgZW4gc29sdWNpb25lcyB0YW5naWJsZXMuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtc3RyZXRjaC5tYi01CiAgICAgIC5jb2wtbGctNi5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAuY3VzdG9tLWltYWdlLWNhcmQuaC0xMDAKICAgICAgICAgIGltZy5jdXN0b20taW1hZ2UtY2FyZF9faW1hZ2Uoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy81MC5wbmciIGFsdD0iIikKICAgICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZF9fdGV4dC5wLTQKICAgICAgICAgICAgaDQubWItMiBJZGVhY2nDs24JCiAgICAgICAgICAgIHAubWItMCBVc28gZGUgdMOpY25pY2FzIGNvbW8gbGx1dmlhIGRlIGlkZWFzLCBtYXBhcyBtZW50YWxlcyBvIFNDQU1QRVIgcGFyYSBnZW5lcmFyIHVuYSBhbXBsaWEgZ2FtYSBkZSBpZGVhcyBzaW4gbGltaXRhciBsYSBjcmVhdGl2aWRhZC4KICAgICAgLmNvbC1sZy02Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgIC5jdXN0b20taW1hZ2UtY2FyZC5oLTEwMAogICAgICAgICAgaW1nLmN1c3RvbS1pbWFnZS1jYXJkX19pbWFnZShzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzUxLnBuZyIgYWx0PSIiKQogICAgICAgICAgLmN1c3RvbS1pbWFnZS1jYXJkX190ZXh0LnAtNAogICAgICAgICAgICBoNC5tYi0yIFByb3RvdGlwYWRvCiAgICAgICAgICAgIHAubWItMCBDcmVhY2nDs24gZGUgbW9kZWxvcyBzaW1wbGVzIG8gc2ltdWxhY2lvbmVzIGRlIGxhcyBpZGVhcyBwYXJhIGV4cGxvcmFyIHN1IGZ1bmNpb25hbGlkYWQgeSByZWNvZ2VyIHJldHJvYWxpbWVudGFjacOzbiBpbmljaWFsLgogICAgaDMgVGVzdGVvIHkgdmFsaWRhY2nDs24KICAgIHAubWItNCBEdXJhbnRlIGVsIHRlc3RlbywgbGFzIHNvbHVjaW9uZXMgc2UgZW5mcmVudGFuIGEgbGEgcmVhbGlkYWQgZGVsIHVzdWFyaW8sIHBlcm1pdGllbmRvIGFqdXN0ZXMgeSBtZWpvcmFzIGl0ZXJhdGl2YXMuCiAgICBUYWJzQi5jb2xvci1hY2VudG8tY29udGVuaWRvLm1iLTUKICAgICAgLnB5LTQucHktbWQtNSh0aXR1bG89IlNlc2lvbmVzIGRlIHBydWViYSIgOmljb25vPSJyZXF1aXJlKCdAL2Fzc2V0cy9jdXJzby90ZW1hcy81Mi5zdmcnKSIgc3R5bGU9ImJhY2tncm91bmQtY29sb3I6ICNGM0YzRjMgIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAgICAgLmNvbC1sZy00LmNvbC03Lm1iLWxnLTAubWItMzogaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYXMvNTMucG5nIiwgc3R5bGU9Im1heC13aWR0aDogMTAwJSIpCiAgICAgICAgICAuY29sLWxnLTcKICAgICAgICAgICAgaDQgU2VzaW9uZXMgZGUgcHJ1ZWJhCiAgICAgICAgICAgIHAubWItMCBFdmFsdWFyIGPDs21vIGludGVyYWN0w7phbiBsb3MgdXN1YXJpb3MgY29uIGVsIHByb3RvdGlwbyB5IHJlY29nZXIgdW4gIGZlZWRiYWNrIGhvbmVzdG8geSBjb25zdHJ1Y3Rpdm8uCiAgICAgIC5weS00LnB5LW1kLTUodGl0dWxvPSJNw6l0cmljYXMgZGUgw6l4aXRvIiA6aWNvbm89InJlcXVpcmUoJ0AvYXNzZXRzL2N1cnNvL3RlbWFzLzU0LnN2ZycpIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0YzRjNGMyAiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgICAgICAuY29sLWxnLTQuY29sLTcubWItbGctMC5tYi0zOiBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hcy81NS5wbmciLCBzdHlsZT0ibWF4LXdpZHRoOiAxMDAlIikKICAgICAgICAgIC5jb2wtbGctNwogICAgICAgICAgICBoNCBNw6l0cmljYXMgZGUgw6l4aXRvCiAgICAgICAgICAgIHAubWItMCBEZWZpbmlyIGluZGljYWRvcmVzIGNsYXJvcyBwYXJhIG1lZGlyIGxhIGVmZWN0aXZpZGFkIHkgbGEgYWNlcHRhY2nDs24gZGUgbGEgc29sdWNpw7NuIHByb3B1ZXN0YS4KICAgICAgLnB5LTQucHktbWQtNSh0aXR1bG89Ikl0ZXJhY2nDs24gYmFzYWRhIGVuIHJlc3VsdGFkb3MiIDppY29ubz0icmVxdWlyZSgnQC9hc3NldHMvY3Vyc28vdGVtYXMvNTYuc3ZnJykiIHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOiAjRjNGM0YzICIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUKICAgICAgICAgIC5jb2wtbGctNC5jb2wtNy5tYi1sZy0wLm1iLTM6IGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWFzLzU3LnBuZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDEwMCUiKQogICAgICAgICAgLmNvbC1sZy03CiAgICAgICAgICAgIGg0IEl0ZXJhY2nDs24gYmFzYWRhIGVuIHJlc3VsdGFkb3MKICAgICAgICAgICAgcC5tYi0wIFJlYWxpemFyIG1lam9yYXMgY29udGluw7phcyBiYXNhZGFzIGVuIGxvcyBoYWxsYXpnb3Mgb2J0ZW5pZG9zIGR1cmFudGUgZWwgdGVzdGVvLCBwYXJhIHBlcmZlY2Npb25hciBsYSBzb2x1Y2nDs24gZmluYWwuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIubWItNQogICAgICAuY29sLWxnLTgubWItbGctMC5tYi0zCiAgICAgICAgcC5tYi00IEVsIERlc2lnbiBUaGlua2luZyBmb21lbnRhIGxhIGlubm92YWNpw7NuIGNlbnRyYWRhIGVuIGVsIHVzdWFyaW8gbWVkaWFudGUgdW4gZW5mb3F1ZSBpdGVyYXRpdm8geSBmbGV4aWJsZS4gRXN0ZSBwcm9jZXNvIGdhcmFudGl6YSBxdWUgbGFzIHNvbHVjaW9uZXMgZGVzYXJyb2xsYWRhcyByZXNwb25kYW4gZGUgbWFuZXJhIGVmZWN0aXZhIGEgbGFzIG5lY2VzaWRhZGVzIHJlYWxlcywgaW50ZWdyYW5kbyBsYSBjcmVhdGl2aWRhZCB5IGVsIGFuw6FsaXNpcyBzaXN0ZW3DoXRpY28gZW4gY2FkYSBldGFwYS4KICAgICAgICAuYmctY29sb3Itd2hpdGUuc2hhZG93LXNvZnQucHktNC5weC1sZy01CiAgICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1hcm91bmQuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAgIC5jb2wtbWQtYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL3ZpZGVvLnN2ZyIsIHN0eWxlPSJ3aWR0aDogOTBweDsiKQogICAgICAgICAgICAuY29sCiAgICAgICAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtYmV0d2Vlbi5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgICAgICAgIC5jb2wubWItMy5tYi1zbS0wCiAgICAgICAgICAgICAgICAgIGgzLm1iLTEgRWwgcHJvY2VzbyBkZSBwZW5zYW1pZW50byBkZSBkaXNlw7FvIAogICAgICAgICAgICAgICAgICBwIFBhcmEgY29tcGxlbWVudGFyIGxvcyBjb25vY2ltaWVudG9zIGFkcXVpcmlkb3Mgc29icmUgcHJveWVjdG9zIGRlIGludmVzdGlnYWNpw7NuIGUgaW5ub3ZhY2nDs24sIHNlIHN1Z2llcmUgZXhwbG9yYXIgZWwgdmlkZW8gaW5kaWNhZG8gYSBjb250aW51YWNpw7NuLgogICAgICAgICAgICAgICAgLmNvbC1zbS1hdXRvCiAgICAgICAgICAgICAgICAgIGEuYm90b24uY29sb3ItYWNlbnRvLWJvdG9uZXMoaHJlZj0iaHR0cHM6Ly95b3V0dS5iZS9fRGtQMzhlYktJTSIgdGFyZ2V0PSJfYmxhbmsiKQogICAgICAgICAgICAgICAgICAgIHNwYW4gVmVyIHZpZGVvCiAgICAgICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctcmlnaHQKICAgICAgLmNvbC1sZy00LmNvbC03OiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81OC5wbmcnLCBhbHQ9JycpCgogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItMihzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0U3RUZGOCAiKQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcub3JkZXItMgogICAgICAgICAgICBoMi5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikgSW50ZWdyYWNpw7NuIGRlIE1ldG9kb2xvZ8OtYXMKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgU2UgaW52aXRhIGEgbGVlciBlbCBkb2N1bWVudG8gSW50ZWdyYWNpw7NuIGRlIE1ldG9kb2xvZ8OtYXMsIHF1ZSBhYm9yZGEgbGEgY29tcGxlbWVudGFyaWVkYWQgZGUgTGVhbiBTdGFydHVwIHkgRGVzaWduIFRoaW5raW5nLCBjYXNvcyBkZSDDqXhpdG8sIGxhIGFkYXB0YWNpw7NuIGFsIGNvbnRleHRvIGNvbG9tYmlhbm8sIGhlcnJhbWllbnRhcyBkZSBhbsOhbGlzaXMgZGUgZGF0b3MgeSBnZXN0acOzbiDDoWdpbCBkZSBwcm95ZWN0b3MsIGRlc3RhY2FuZG8gZXN0cmF0ZWdpYXMgcHLDoWN0aWNhcyBwYXJhIGltcHVsc2FyIGxhIGlubm92YWNpw7NuIGNvbiB1biBlbmZvcXVlIGFkYXB0YWRvIHkgc29zdGVuaWJsZS4KCiAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9fSW50ZWdyYWNpb25fZGVfTWV0b2RvbG9naWFzLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwIDxzdHJvbmc+QW5leG8uIDwvc3Ryb25nPiBJbnRlZ3JhY2nDs24gZGUgTWV0b2RvbG9nw61hcy4KCiAgICAgICAgICAuY29sLWxnLTUKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy81OS5wbmcnLCBhbHQ9JycpCgogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyIE1BVEVSSUFMIENPTVBMRU1FTlRBUklPCiAgICAgICAgLnJvdy5tYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgICAgICAgLmNvbC0xMi5jb2wtbWQtNi5jb2wtbGctNwogICAgICAgICAgICBwIExvcyBpbnZpdGFtb3MgYSBleHBsb3JhciBlbCBtYXRlcmlhbCBjb21wbGVtZW50YXJpbyBkZSBlc3RlIGN1cnNvLCBlbiBlc3RhIHNlY2Npw7NuIGVuY29udHJhcsOhIHJlY3Vyc29zIHF1ZSBsZSBwZXJtaXRpcsOhbiBwcm9mdW5kaXphciAgeSBlbnJpcXVlY2VyIHN1IGFwcmVuZGl6YWplIGVuIGxvcyB0ZW1hcyB0cmF0YWRvcyBlbiBlc3RhIHVuaWRhZC4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlLzFLd29GSFJPNnVzIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgS2FuYmFuIFRvb2wuICgyMDIxLCBtYXJ6byAyMikuIMK/UXXDqSBlcyB1biBUYWJsZXJvIEthbmJhbj8KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlLzd5SVpPT1haamFVIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgT3BlbldlYmluYXJzLiAoMjAxOCwgZGljaWVtYnJlIDE5KS4gUXXDqSBlcyB1biBTcHJpbnQgZW4gU2NydW0KCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMjcyMTMwIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgQ2FiZXJvIEZheW9zLCBJLiAoQ29vcmQuKS4gKDIwMjQpLiBQZXJzcGVjdGl2YXMgY29udGVtcG9yw6FuZWFzIGVuIGVkdWNhY2nDs246IGlubm92YWNpw7NuLCBpbnZlc3RpZ2FjacOzbiB5IHRyYW5zZm9ybWFjacOzbjogKDEgZWQuKS4gRHlraW5zb24uCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMTI3OTYxIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgSGVycmVyYSBMZW11cywgSy4gQy4gJiBMYXpjYW5vIEhlcnJlcmEsIEMuIEYuICgyMDIwKS4gRGVzYXJyb2xsbyBkZSBhbWJpZW50ZXMgw7NwdGltb3MgZGUgaW5ub3ZhY2nDs24gZW4gbGEgcmVsYWNpw7NuIHVuaXZlcnNpZGFkLWVtcHJlc2E6ICggZWQuKS4gRWRpdG9yaWFsIFVuaXZlcnNpdGFyaWEuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMjcxNzI2IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgSGVydsOhcy1Hw7NtZXosIEMuIChDb29yZC4pLCBEw61hei1Ob2d1ZXJhLCBNLiBELiAoQ29vcmQuKSAmIEZsb3JpbmEgR3Jvc3UsIEUuIChDb29yZC4pLiAoMjAyNCkuIFRyYW5zZm9ybWFuZG8gbGEgZWR1Y2FjacOzbjogdGVjbm9sb2fDrWEsIGlubm92YWNpw7NuIHkgc29jaWVkYWQgZW4gbGEgZXJhIGRpZ2l0YWw6ICgxIGVkLikuIER5a2luc29uLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2VyZWFkZXIvdGVjbm9sb2dpY2FkZWxvcmllbnRlLzE2MzU0Mz9wYWdlPTYiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBMZWl2YSBPbGl2ZW5jaWEsIEouIChDb29yZC4pICYgTWF0YXMgVGVycsOzbiwgQS4gKENvb3JkLikuICgyMDIwKS4gSW52ZXN0aWdhY2nDs24geSBleHBlcmllbmNpYXMgZGUgaW5ub3ZhY2nDs24gcGVkYWfDs2dpY2EgaW5jbHVzaXZhIGVuIHVuYSBzb2NpZWRhZCBpbnRlcmN1bHR1cmFsIHkgZW4gcmVkOiAoIGVkLikuIER5a2luc29uLgoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2xjL3RlY25vbG9naWNhZGVsb3JpZW50ZS90aXR1bG9zLzIxNzQ3MCIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIE1hcnTDrW4gQ3JpdGlracOhbiwgRC4gKElsLiksIE1hcnVnw6FuIFNvbMOtcywgRi4gKElsLikgJiBSYW3DrXJleiBCYXJyZWRvLCBCLiAoSWwuKS4gKDIwMjEpLiBJbm5vdmFjacOzbiBlbiBsYSBpbnZlc3RpZ2FjacOzbiB5IHRyYW5zZmVyZW5jaWEgZGVsIGNvbm9jaW1pZW50bzogdMOpY25pY2FzLCBjYXNvcyBwcsOhY3RpY29zIHkgYXBsaWNhY2lvbmVzOiAoMSBlZC4pLiBEeWtpbnNvbi4KCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy8yNTM0ODkiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBNYXJ0w61uZXotR8OzbWV6LCBKLiAoQ29tcC4pLiAoMjAyNCkuIElubm92YWNpw7NuIHkgY29tcGV0aXRpdmlkYWQgZW4gbGFzIG9yZ2FuaXphY2lvbmVzOiAoMSBlZC4pLiBVbml2ZXJzaWRhZCBDYXTDs2xpY2EgTHVpcyBBbWlnw7MuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMjcxMTcyIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgTWlyYW5kYSBHb256w6FsZXosIEYuIEouICgyMDIzKS4gTGEgZ2VzdGnDs24gZGUgbGEgaW5ub3ZhY2nDs24gZW4gbGEgZW1wcmVzYTogKDEgZWQuKS4gU2VydmljaW8gZGUgUHVibGljYWNpb25lcyBkZSBsYSBVbml2ZXJzaWRhZCBkZSBFeHRyZW1hZHVyYS4KCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCiAgICAKCg=="},null]}